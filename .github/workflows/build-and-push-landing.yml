name: Build and Push Landing Docker Image

on:
  push:
    tags:
      - 'v*.*.*'
    paths:
      - 'landing/**'
  workflow_dispatch:
    inputs:
      discord_webhook_url:
        description: 'Discord Webhook URL'
        required: false

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/ai-professor_landing

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern=landing-v{{version}}
            type=semver,pattern=landing-v{{major}}.{{minor}}
            type=semver,pattern=landing-v{{major}}
            type=raw,value=latest

      - name: Set environment variables
        id: set-env
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "DISCORD_WEBHOOK_URL=${{ github.event.inputs.discord_webhook_url }}" >> $GITHUB_ENV
          else
            echo "DISCORD_WEBHOOK_URL=${{ secrets.DISCORD_WEBHOOK_URL }}" >> $GITHUB_ENV
          fi

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./landing
          file: ./landing/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            DISCORD_WEBHOOK_URL=${{ env.DISCORD_WEBHOOK_URL }}
          cache-from: type=registry,ref=${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.IMAGE_NAME }}:buildcache,mode=max

      - name: Image digest
        run: echo "${{ steps.meta.outputs.tags }}"
